drawdag(dag_south_age_marriage)
# Full model containing all
model_S_A_M_full <- quap(
alist(
#South (S --> M)
M_std ~ dnorm(mu,sigma),
mu <- a[South] + b[South]*(A_std-mean(A_std)),
a[South] ~ dnorm(0,0.5),
b[South] ~ dlnorm(0,1),
sigma ~ dexp(1),
#Age (S --> A --> M)
A_std~ dnorm(nu,tau),
nu <- A[South],
A[South] ~ dnorm(0, 0.5),
tau ~ dexp(1)
), data=d )
precis(model_S_A_M_full, depth=2)
plot(coeftab(model_S_A_M_full))
detach("package:rethinking", unload = TRUE)
remove.packages("rethinking", lib="~/Library/R/4.0/library")
devtools::install_github("stan-dev/cmdstanr", force = TRUE)
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
devtools::install_github("rmcelreath/rethinking")
#loading packages
pacman::p_load(rethinking, ggplot2, tidyverse)
#loading packages
pacman::p_load(rethinking, ggplot2, tidyverse)
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
devtools::install_github("rmcelreath/rethinking")
plot(coeftab(model_S_A_M_full))
#loading packages
pacman::p_load(rethinking, ggplot2, tidyverse)
# Full model containing all
model_S_A_M_full <- quap(
alist(
#South (S --> M)
M_std ~ dnorm(mu,sigma),
mu <- a[South] + b[South]*(A_std-mean(A_std)),
a[South] ~ dnorm(0,0.5),
b[South] ~ dlnorm(0,1),
sigma ~ dexp(1),
#Age (S --> A --> M)
A_std~ dnorm(nu,tau),
nu <- A[South],
A[South] ~ dnorm(0, 0.5),
tau ~ dexp(1)
), data=d )
precis(model_S_A_M_full, depth=2)
plot(coeftab(model_S_A_M_full))
plot(coeftab(model_S_A_M_full), by.model = TRUE)
plot(coeftab(model_S_A_M_full))
plot(coeftab(model_S_A_M_full), by.model = TRUE)
AMsim<- sim(model_S_A_M_full,
data=list(South=c(1,2)),
vars=c("A_std", "M_std"))
#contrast between South and Not South, from full model
M_do_S_auto <- AMsim$M_std[,2] - AMsim$M_std[,1]
#contrast plot
dens(M_do_S_auto,  xlab= "posterior marriage rate contrast (Not South - South)", ylab= "posterior probability density")
abline(v=0, col= "red")
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
set.seed(1)
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
AMsim<- sim(model_S_A_M_full,
data=list(South=c(1,2)),
vars=c("A_std", "M_std"))
#contrast between South and Not South, from full model
M_do_S_auto <- AMsim$M_std[,2] - AMsim$M_std[,1]
#contrast plot
dens(M_do_S_auto,  xlab= "posterior marriage rate contrast (Not South - South)", ylab= "posterior probability density")
abline(v=0, col= "red")
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
AMsim<- sim(model_S_A_M_full,
data=list(South=c(1,2)),
vars=c("A_std", "M_std"))
#contrast between South and Not South, from full model
M_do_S_auto <- AMsim$M_std[,2] - AMsim$M_std[,1]
#contrast plot
dens(M_do_S_auto,  xlab= "posterior marriage rate contrast (Not South - South)", ylab= "posterior probability density")
abline(v=0, col= "red")
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
AMsim<- sim(model_S_A_M_full,
data=list(South=c(1,2)),
vars=c("A_std", "M_std"))
#contrast between South and Not South, from full model
M_do_S_auto <- AMsim$M_std[,2] - AMsim$M_std[,1]
#contrast plot
dens(M_do_S_auto,  xlab= "posterior marriage rate contrast (Not South - South)", ylab= "posterior probability density")
abline(v=0, col= "red")
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
set.seed(1)
AMsim<- sim(model_S_A_M_full,
data=list(South=c(1,2)),
vars=c("A_std", "M_std"))
#contrast between South and Not South, from full model
M_do_S_auto <- AMsim$M_std[,2] - AMsim$M_std[,1]
#contrast plot
dens(M_do_S_auto,  xlab= "posterior marriage rate contrast (Not South - South)", ylab= "posterior probability density")
abline(v=0, col= "red")
set.seed(1)
#proportion above zero
sum(M_do_S_auto  > 0 ) /1000  # 0.568
#proportion below zero
sum(M_do_S_auto  < 0 ) /1000  # 0.432
library(dagitty)
#DAG corona
dag_corona<- dagitty( "dag {
Corona Fear -> Sanitizing
Sanitizing-> Germ Level
Face Mask -> Germ Level
Corona Fear -> Face Mask
Germ Level -> Posive Test
}")
coordinates(dag_sex_drunk) <- list( x=c(Corona Fear =1,Face Mask =0, Sanitizing- =1, Germ Level=1, Posive Test= 3) , y=c(Corona Fear =0,Face Mask =0, Sanitizing- = -2, Germ Level=1, Posive Test=3) )
coordinates(dag_corona) <- list( x=c(Corona Fear =1,Face Mask =0, Sanitizing- =1, Germ Level=1, Posive Test= 3) , y=c(Corona Fear =0,Face Mask =0, Sanitizing- = -2, Germ Level=1, Posive Test=3) )
#DAG corona
dag_corona<- dagitty( "dag {
Corona_Fear -> Sanitizing
Sanitizing-> Germ Level
Face Mask -> Germ Level
Corona Fear -> Face Mask
Germ Level -> Posive Test
}")
coordinates(dag_corona) <- list( x=c(Corona_Fear =1,Face Mask =0, Sanitizing- =1, Germ Level=1, Posive Test= 3) , y=c(Corona_Fear =0,Face Mask =0, Sanitizing- = -2, Germ Level=1, Posive Test=3) )
#DAG corona
dag_corona<- dagitty( "dag {
Corona_Fear -> Sanitizing
Sanitizing-> Germ_Level
Face_Mask -> Germ_Level
Corona_Fear -> Face_Mask
Germ_Level -> Posive_Test
}")
coordinates(dag_corona) <- list( x=c(Corona_Fear =1,Face_Mask =0, Sanitizing- =1, Germ_Level=1, Posive_Test= 3) , y=c(Corona_Fear =0,Face_Mask =0, Sanitizing- = -2, Germ_Level=1, Posive_Test=3) )
coordinates(dag_corona) <- list( x=c(Corona_Fear =1,Face_Mask =0, Sanitizing- =1, Germ_Level=1, Posive_Test= 3) , y=c(Corona_Fear =0,Face_Mask =0, Sanitizing = -2, Germ_Level=1, Posive_Test=3) )
coordinates(dag_corona) <- list( x=c(Corona_Fear =1,Face_Mask =0, Sanitizing =-1, Germ_Level=1, Posive_Test= 3) , y=c(Corona_Fear =0,Face_Mask =0, Sanitizing = -2, Germ_Level=1, Posive_Test=3) )
drawdag(dag_corona)
library(dagitty)
#DAG corona
dag_corona<- dagitty( "dag {
Corona_Fear -> Sanitizing
Sanitizing-> Germ_Level
Face_Mask -> Germ_Level
Corona_Fear -> Face_Mask
Germ_Level -> Posive_Test
}")
coordinates(dag_corona) <- list( x=c(Corona_Fear =1,Face_Mask =0, Sanitizing =-1, Germ_Level=1, Posive_Test= 3) , y=c(Corona_Fear =0,Face_Mask =0, Sanitizing = -2, Germ_Level=1, Posive_Test=3) )
drawdag(dag_corona)
pacman::p_load(usethis,dplyr, tidyverse, ggplot2, rstan)
pacman::p_load(usethis,dplyr, tidyverse, ggplot2, rstan, daggity)
#DAG corona
dag_corona<- dagitty( "dag {
Corona_Fear -> Sanitizing
Sanitizing-> Germ_Level
Face_Mask -> Germ_Level
Corona_Fear -> Face_Mask
Germ_Level -> Posive_Test
}")
coordinates(dag_corona) <- list( x=c(Corona_Fear =1,Face_Mask =0, Sanitizing =-1, Germ_Level=1, Posive_Test= 3) , y=c(Corona_Fear =0,Face_Mask =0, Sanitizing = -2, Germ_Level=1, Posive_Test=3) )
drawdag(dag_corona)
pacman::p_load(usethis,dplyr, tidyverse, ggplot2, rstan, dagitty)
drawdag(dag_corona)
library(rethinking)
drawdag(dag_corona)
coordinates(dag_corona) <- list( x=c(Corona_Fear =0,Face_Mask =1, Sanitizing =0, Germ_Level=1, Posive_Test= 1) , y=c(Corona_Fear =0,Face_Mask =0, Sanitizing = -1, Germ_Level=-1, Posive_Test=-2) )
drawdag(dag_corona)
coordinates(dag_corona) <- list( x=c(Corona_Fear =0,Face_Mask =-1, Sanitizing =0, Germ_Level=-1, Posive_Test= -1) , y=c(Corona_Fear =0,Face_Mask =0, Sanitizing = 1, Germ_Level=1, Posive_Test=2) )
drawdag(dag_corona)
impliedConditionalIndependencies(dag_corona)
equivalentDAGs(corona_dag)
equivalentDAGs(dag_corona)
pacman::p_load(usethis,dplyr, tidyverse, ggplot2, rstan, dagitty,ggdag)
library(rethinking)
#DAG corona
dag_corona<- dagitty( "dag {
corona_fear -> sanitizing
sanitizing-> germ_level
face_mask -> germ_level
corona_fear -> face_mask
germ_level -> positive_test
}")
coordinates(dag_corona) <- list( x=c(Corona_Fear =0,Face_Mask =-1, Sanitizing =0, Germ_Level=-1, Posive_Test= -1) , y=c(Corona_Fear =0,Face_Mask =0, Sanitizing = 1, Germ_Level=1, Posive_Test=2) )
drawdag(dag_corona)
#ggdag(dag_corona, layout="nicely")+theme_dag_blank()  # another layout
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona,exposure="corona_fear", outcome="positive_test")
# Deriving our DAGâ€™s conditional independencies
impliedConditionalIndependencies(dag_corona)
dag_corona_1<- dagitty( "dag {
corona_fear -> sanitizing
sanitizing-> germ_level
face_mask -> germ_level
corona_fear -> face_mask
}")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="corona_fear", outcome="germ_level")
#DAG corona
dag_corona_1<- dagitty( "dag {
corona_fear -> sanitizing
sanitizing-> germ_level
face_mask -> germ_level
corona_fear -> face_mask
}")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="corona_fear", outcome="germ_level")
#DAG corona
dag_corona_1<- dagitty( "dag {
corona_fear -> sanitizing
sanitizing-> germ_level
face_mask -> germ_level
corona_fear -> face_mask
germ_level -> positive_test
sanitize -> positive_test
}")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="corona_fear", outcome="germ_level")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="corona_fear", outcome="positive_test")
#DAG corona
dag_corona_1<- dagitty( "dag {
corona_fear -> sanitizing
sanitizing-> germ_level
face_mask -> germ_level
corona_fear -> face_mask
germ_level -> positive_test
sanitizing -> positive_test
}")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="corona_fear", outcome="positive_test")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="corona_fear", outcome="positive_test")
dag_corona_1<- dagitty( "dag {
corona_fear -> sanitizing
sanitizing-> germ_level
face_mask -> germ_level
corona_fear -> face_mask
germ_level -> positive_test
sanitizing -> positive_test
}")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="corona_fear", outcome="positive_test")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="face_mask", outcome="positive_test")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="corona_fear", outcome="positive_test")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona_1,exposure="sanitizing", outcome="positive_test")
dag_corona<- dagitty( "dag {
corona_fear -> sanitizing
sanitizing-> germ_level
face_mask -> germ_level
corona_fear -> face_mask
germ_level -> positive_test
}")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona,exposure="face_mask", outcome="positive_test")
# Shutting the backdoor - analyzing the graph to block the backdoor
adjustmentSets(dag_corona,exposure="corona_fear", outcome="positive_test")
rbinom()
rbinom()?
?rbinom()
?rnorm()
face_mask <-  rbinom(1000, size=1000 , prob= 0.5)
face_mask
?rbinom()
face_mask <-  rbinom(10,1,0.5)
face_mask
face_mask <-  rbinom(1000, size= 1, prob= 0.5)
face_mask
corona_fear
#simulating variables:
corona_fear <- rnorm(1000, mean= 0, sd=2)
corona_fear
sanitizing <-   rpois(1000, lamda = 7)  # Sanitizing on a count scale. lambda = average number of events per interval
sanitizing <-   rpois(1000, 7)  # Sanitizing on a count scale. lambda = average number of events per interval
germ_level <-  runif(1000, min= 0, max=100)
sanitizing
germ_level <-  runif(1000, min= 0, max=5000)
germ_level
mean(germ_level)
germ_level <-  runif(1000, min= 0, max=7000)
mean(germ_level)
germ_level <-  runif(1000, min= 0, max=7000)
mean(germ_level)
germ_level <-  runif(1000, min= 0, max=7000)
mean(germ_level)
germ_level <-  runif(1000, min= 0, max=7000)
mean(germ_level)
germ_level <-  runif(1000, min= 0, max=7000)
mean(germ_level)
germ_level <-  runif(1000, min= 0, max=7000)
mean(germ_level)
germ_level <-  rnorm(1000, min= 0, max=7000)
#simulating variables:
corona_fear <- rnorm(1000, mean= 50 , sd= 10)
corona_fear
mean(corona_fear)
hist(corona_fear)
#simulating variables:
corona_fear <- rnorm(1000, mean= 30 , sd= 10)
mean(corona_fear)
hist(corona_fear)
#simulating variables:
corona_fear <- rnorm(1000, mean= 50 , sd= 10)
mean(corona_fear)
hist(corona_fear)
hist(rbeta(10000,5,2))
hist(rbeta(10000,2,5))
hist(rbeta(10000,5,5))
?rbeta
hist(rbeta(10000,2,5))
corona_fear <- rbeta(1000,30, 100 )
hist(corona_fear)
corona_fear <- rbeta(1000,30, 10 )
hist(corona_fear)
corona_fear <- rbeta(1000,30, 1000 )
hist(corona_fear)
corona_fear <- rbeta(1000,20, 100)
hist(corona_fear)
corona_fear <- rbeta(1000,20, 5)
hist(corona_fear)
corona_fear <- rbeta(1000,1, 5)
hist(corona_fear)
corona_fear <- rbeta(1000,2, 5)
hist(corona_fear)
corona_fear
mean(corona_fear)
germ_level <-  rnorm(1000, mean=3500 , sd= 1000)
germ_level
infected <-  rbinom(1000, size= 1, prob= 0.3) #probability???? # using probability from portfolio 1
infected
df <- tibble(germ_level, sanitizing, infected, face_mask, corona_fear)
head(df)
df <- df %>%
scale(germ_lvl_std =germ_level, sanitizing_std =sanitizing, infected_std=infected, face_mask_std=face_mask, corona_fear_std= corona_fear)
df <- df %>%
mutate(scale(germ_lvl_std =germ_level, sanitizing_std =sanitizing, infected_std=infected, face_mask_std=face_mask, corona_fear_std= corona_fear))
df <- df %>%
mutate(scale(germ_lvl_std =germ_level))
?mutate()
df <- df %>%
mutate(scale(germ_level))
View(df)
df <- df %>%
mutate(germ_std=scale(germ_level))
df <- df %>%
mutate(germ_std=scale(germ_level),sanitizing_std= scale(sanitizing),  infected_std=scale(infected),face_mask_std=scale(face_mask ), corona_fear_std= scale(corona_fear))
#simulating variables:
corona_fear <- rbeta(1000, 2, 5)#we assume skewedness (more people are not affraid, less people are super affraid)
hist(corona_fear)
mean(corona_fear)
#runif(1000, min= 0, max=100) #corona fear on a scale from 0 -100 (0= not being scared & 100= being scared)
face_mask <-  rbinom(1000, size= 1, prob= 0.5) # 1000 = antal observations, 1 = antal trials per observation, 0.5 = euqal probability for 0 and 1 at each trial
sanitizing <-   rpois(1000, 7)  # Sanitizing on a count scale. lambda = average number of events per interval
#hvordan gÃ¸r vi den her afhÃ¦ngig af corona fear
>>>>>>> 9df7325d4929d2a90888d714965cb7be8cf616de
germ_level <-  rnorm(1000, mean=3500 , sd= 1000)
infected <-  rbinom(1000, size= 1, prob= 0.3) #probability??? # (OBS)
# creating df
df <- tibble(germ_level, sanitizing, infected, face_mask, corona_fear)
<<<<<<< HEAD
=======
df <- df %>%
mutate(germ_std=scale(germ_level),sanitizing_std= scale(sanitizing),  infected_std=scale(infected),face_mask_std=scale(face_mask ), corona_fear_std= scale(corona_fear))
View(df)
#crn_ _||_ pst_ | grm_
model2<- quap(
alist(
I ~ dnorm( mu , sigma ) ,
mu <- a + bCoronaFear*corona_fear_std + bInfected*infected_std + bGermLevel*germ_level_std,
a ~ dnorm( 0 , 0.2 ) ,
bCoronaFear ~ dnorm( 0 , 1 ) ,
bInfected ~ dnorm( 0 , 1 ),
bGermLevel~ dnorm( 0 , 1 ),
sigma ~ dexp( 1 )
) , data = df )
#crn_ _||_ pst_ | grm_
model2<- quap(
alist(
infected_std ~ dnorm( mu , sigma ) ,
mu <- a + bCoronaFear*corona_fear_std + bInfected*infected_std + bGermLevel*germ_level_std,
a ~ dnorm( 0 , 0.2 ) ,
bCoronaFear ~ dnorm( 0 , 1 ) ,
bInfected ~ dnorm( 0 , 1 ),
bGermLevel~ dnorm( 0 , 1 ),
sigma ~ dexp( 1 )
) , data = df )
#crn_ _||_ pst_ | grm_
model2<- quap(
alist(
infected ~ dnorm( mu , sigma ) ,
mu <- a + bCoronaFear*corona_fear_std  + bGermLevel*germ_level_std,
a ~ dnorm( 0 , 0.2 ) ,
bCoronaFear ~ dnorm( 0 , 1 ) ,
bGermLevel~ dnorm( 0 , 1 ),
sigma ~ dexp( 1 )
) , data = df )
#crn_ _||_ pst_ | grm_
model2<- quap(
alist(
infected ~ dnorm( mu , sigma ) ,
mu <- a + bCoronaFear*corona_fear_std  + bGermLevel*germ_std,
a ~ dnorm( 0 , 0.2 ) ,
bCoronaFear ~ dnorm( 0 , 1 ) ,
bGermLevel~ dnorm( 0 , 1 ),
sigma ~ dexp( 1 )
) , data = df )
precis( model2)
plot(precis(model2))
plot(coeftab(model2))
plot( coeftab(model2), par=c("bCoronaFear", "bGermLevel" )
plot(coeftab(model2), par=c("bCoronaFear", "bGermLevel" )
plot(coeftab(model2), par=c("bCoronaFear", "bGermLevel" ))
detach("package:rethinking", unload = TRUE)
remove.packages("rethinking", lib="~/Library/R/4.0/library")
devtools::install_github("stan-dev/cmdstanr")
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
devtools::install_github("rmcelreath/rethinking")
pacman::p_load(rethinking)
model2<- quap(
alist(
corona_fear_std ~ dnorm( mu , sigma ) ,
mu <- a + bInfected*infected_std  + bGermLevel*germ_std,
a ~ dnorm( 0 , 0.2 ) ,
bInfected ~ dnorm( 0 , 1 ) ,
bGermLevel~ dnorm( 0 , 1 ),
sigma ~ dexp( 1 )
) , data = df )
pacman::p_load(rethinking)
#pst_ _||_ sntz | grm_
model6<- quap(
alist(
infected_std ~ dnorm( mu , sigma ) ,
mu <- a + bSanitizing*sanitizing_std  + bGermLevel*germ_std,
a ~ dnorm( 0 , 0.2 ) ,
bSanitizing ~ dnorm( 0 , 1 ) ,
bGermLevel~ dnorm( 0 , 1 ),
sigma ~ dexp( 1 )
) , data = df )
?rpois()
dpois(100)
hist(dpois(100,3))
hist(dpois(100,50))
hist(dpois(corona_fear,50))
hist(rpois(corona_fear,50))
hist(rpois(corona_fear,20))
hist(rpois(corona_fear,10))
hist(rpois(corona_fear,50))
lambda_cf <- 2*corona_fear
sanitizing <- dpois(1000, lambda_cf)  # Sanitizing on a count scale. lambda = average number of events per interval
hist(sanitizing)
sanitizing <- rpois(1000, lambda_cf)  # Sanitizing on a count scale. lambda = average number of events per interval
hist(sanitizing)
sanitizing <- dpois(1000, lambda_cf)  # Sanitizing on a count scale. lambda = average number of events per interval
dens(sanitizing)
sanitizing <- dpois(1000, lambda_cf)  # Sanitizing on a count scale. lambda = average number of events per interval
dens(sanitizing)
density(sanitizing)
plot(sanitizing)
hist(sanitizing)
sanitizing <- dpois(1000, lambda_cf)  # Sanitizing on a count scale. lambda = average number of events per interval
sanitizing <- rpois(1000, lambda_cf)  # Sanitizing on a count scale. lambda = average number of events per interval
hist(sanitizing)
######## SANITIZING = S~Possion(lambda_cf) #sanitizing er defined by your corona fear
sanitizinz <- exp(corona_fear)
sanitizinz
hist(sanitizinz)
######## SANITIZING = S~Possion(lambda_cf) #sanitizing er defined by your corona fear
sanitizinz <- corona_fear^2
hist(sanitizinz)
corona_fear
hist(corona_fear)
>>>>>>> 9df7325d4929d2a90888d714965cb7be8cf616de
